Red [	Title:   "Test images operators Red VID "	Author:  "Francois Jouen - Didier Cadieu"	File: 	 %opimage.red	Version: 1.2.0	Needs:	 'View]; all we need for computer vision with red#include %../libs/redcv.red ; for red functionsisFile: falsemargins: 10x10system/view/auto-sync?: no;interfacerimg: make image!  reduce [512x512 black]rimg2: make image! reduce [512x512 black]testimg: make image! reduce [512x512 black]loadImage: does [	isFile: false	canvas/image: none	;canvas/size: 0x0	tmp: request-file	if not none? tmp [		t1: now/time/precise		rimg: load tmp		; if image does not fit screen, scale it		scale: max 1 1 + max (2 * margins/x + rimg/size/x) / system/view/screens/1/size/x (4 * margins/y + sInfo/size/y + op1/size/y + rimg/size/y) / system/view/screens/1/size/y		win/text: append append append to string! to-local-file tmp "(1:" scale ")"		;generate random and mean image		rimg2: rcvRandom/uniform rimg/size 255.255.255.0		testimg: rcvMean rimg 				; redim window with min size		win/size/x: 2 * margins/x + max 500 rimg/size/x / scale		win/size/y: 4 * margins/y + sInfo/size/y + op1/size/y + max 150 rimg/size/y / scale		; redim image view		canvas/size: rimg/size / scale		canvas/image: rimg		t2: now/time/precise		; update bottom positions and infos		sInfo/offset/y: win/size/y - margins/y - sInfo/size/y		sBar1/text: form rimg/size		sBar2/text: form rcvMeanImage rimg		sBar21/text: form rcvVarImage/std rimg		sBar3/text: form scale		sBar4/text: form (t2 - t1)		isFile: true		; reset operation selectors to none		do-operation none		;foreach combo [op1 op2 op3] [set in get :combo 'selected 1]	]	show win]; List of operationsoperations: [	conversion [		"Conversions"			[rimg]		"GrayScale/Average"		[rcv2Gray/average rimg ]		"GrayScale/Luminosity"	[rcv2Gray/luminosity rimg ]		"GrayScale/lightness"	[rcv2Gray/lightness rimg ]		"Black and White"		[rcv2BW rimg]		"Red Channel"			[rcvSplit/red rimg]		"Green Channel"			[rcvSplit/green rimg]		"Blue Channel"			[rcvSplit/blue rimg]		"RGB => BGR"			[rcv2BGRA rimg]		"RBG => XYZ"			[testimg: canvas/image: rcvRGB2XYZ rimg]		"XYZ => RGB"			[rcvXYZ2RGB testimg]		"Up Down Flip"			[rcvFlip/vertical rimg]		"Left Right Flip"		[rcvFlip/horizontal rimg]		"V&H Flip"				[rcvFlip/vertical rcvFlip/horizontal rimg]	]	logical [		"Logical"	  			[rimg]		"And Images"			[rcvAND rimg rimg2]		"Nand images"			[rcvNAND rimg rimg2]		"Or Images"				[rcvOR rimg rimg2]		"Nor Images"			[rcvNOR rimg rimg2]		"Xor Images"			[rcvXOR rimg rimg2]		"NXor Images"			[rcvNXor rimg rimg2]		"Not Image"				[rcvNot rimg]		"And Red"				[rcvAndS rimg 255.0.0.0]		"And Green"				[rcvAndS rimg 0.255.0.0]		"And Blue"				[rcvAndS rimg 0.0.255.0]		"Or Green"				[rcvORS rimg 0.255.0.0]		"Xor Green"				[rcvXORS rimg 0.255.0.0]		"Min Images"			[rcvMin rimg2 rimg]		"Max Images"			[rcvMax rimg2 rimg]		"Invert Image"			[rcvInvert rimg]	]	math [		"Math"					[rimg]		"Add Images"			[rcvAdd rimg rimg2]		"Substract Images"		[rcvSub rimg2 rimg]		"Multiply Images"		[rcvMul rimg rimg2]		"Divide Images"			[rcvDiv rimg rimg2]		"Modulo images"			[rcvMod rimg rimg2]		"Remainder Images"		[rcvRem rimg rimg2]		"Add Scalar (128)"		[rcvAddS rimg 128]		"Substract Scalar (64)"	[rcvSubS rimg 64]		"Multiply by 2"			[rcvMulS rimg 2]		"Divide by 2"			[rcvDivS rimg 2]		"Modulo 128"			[rcvModS rimg 128]		"Remainder 2"			[rcvRemS rimg 64]		"Power 2"				[rcvPow rimg 2]		"Left Shift 2" 			[rcvLSH rimg 2]		"Right Shift 4"			[rcvRSH rimg 4]		"Add 128.128.128.0"		[rcvAddT rimg 128.128.128.0]		"Sub 128.128.128.0"		[rcvSubT rimg 128.128.128.0]		"Abs Diff Images"		[rcvAbsDiff rimg rimg2]	]]do-operation: func [face [object! none!]] [	; reset all combo to 1 but the used one	foreach combo [op1 op2 op3] [unless same? face combo: get combo [combo/selected: 1]]	show win	; no image: exit	if any [not isFile  none? face] [exit]	num: face/selected	ope: face/extra	; apply the choosed treatment	t1: now/time/precise	canvas/image: do select operations/:ope face/data/:num	t2: now/time/precise	sBar4/text: form (t2 - t1)	show win	]view win: layout [	title "Red view"	origin margins space margins	style btn: button -1x22	style drop-d: drop-down 120x24 on-create [		ope: face/extra		face/data: extract operations/:ope 2		face/selected: 1	] on-change [do-operation face face/extra]	style fld: field 100x20	style txt: text middle -1x20	btn "Load" [loadImage]	op1: drop-d do [op1/extra: 'conversion]	op2: drop-d do [op2/extra: 'logical]	op3: drop-d do [op3/extra: 'math]	btn "Quit" [quit]	return	canvas: base rimg return	sInfo: panel [origin 0x0 txt "Image size:" sBar1: fld 60 			txt 90 "Image mean/SD:" sBar2: fld 75 sBar21: fld 75			txt "Scale:" sBar3: fld 30x20			return			txt "Rendered:" sBar4: fld 120	]]