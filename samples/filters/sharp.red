Red [	Title:   "Laplacian Filter "	Author:  "Francois Jouen"	File: 	 %sharp.red	Needs:	 'View]; last Red Master required!#include %../../libs/redcv.red ; for redCV functionsmargins: 10x10defSize: 512x512img1: rcvCreateImage defSizedst:  rcvCreateImage defSizeisFile: falsedegree: 0.6loadImage: does [    isFile: false	canvas/image/rgb: black	canvas/size: 0x0	tmp: request-file	if not none? tmp [		fileName: to string! to-local-file tmp		win/text: fileName		either cb/data [img1: rcvLoadImage/grayscale tmp]					   [img1: rcvLoadImage tmp]		dst:  rcvCloneImage img1		; update faces		if img1/size/x >= defSize/x [			win/size/x: img1/size/x + 20			win/size/y: img1/size/y + 250		] 		either (img1/size/x = img1/size/y) [bb/size: 120x120] [bb/size: 160x120]		canvas/size: img1/size		canvas/image/size: canvas/size			canvas/offset/x: (win/size/x - img1/size/x) / 2		bb/image: img1		canvas/image: dst		isFile: true		do op		r1/data: true		r2/data: false		sl/visible?: f/visible?: false		degree: 0.6	]]ops: [	[rcvSharpen img1 dst img1/size]	[rcvBinomialFilter img1 dst img1/size degree]]op: ops/1; ***************** Test Program ****************************view win: layout [		title "Sharpen"		origin margins space margins		cb: check "Grayscale" 		button 60 "Load" 		[loadImage]								button 60 "Quit" 		[rcvReleaseImage img1 								rcvReleaseImage dst Quit]		return		bb: base 160x120 img1		r1: radio "Uniform sharpen"  [sl/visible?: f/visible?: false do op: ops/1]		r2: radio "Binomial sharpen" [sl/visible?: f/visible?: true do op: ops/2]			return 		sl: slider 400 [degree: face/data * 1.2						f/text: form degree						do op]		f: field 100 "0.6"		return		canvas: base 512x512 dst			do [r1/data: true sl/data: degree sl/visible?: f/visible?: false]]