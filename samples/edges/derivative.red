Red [	Title:   "Laplacian Filter "	Author:  "Francois Jouen"	File: 	 %derivative.red	Needs:	 'View]; last Red Master required!#include %../../libs/redcv.red ; for redCV functionsmargins: 10x10defSize: 512x512img1: rcvCreateImage defSizedst:  rcvCreateImage defSizeisFile: falsefactor: 127.0 direction: 3loadImage: does [    isFile: false	canvas/image/rgb: black	canvas/size: 0x0	tmp: request-file	if not none? tmp [		fileName: to string! to-local-file tmp		win/text: fileName		either cb/data [img1: rcvLoadImage/grayscale tmp]					   [img1: rcvLoadImage tmp]		dst:  rcvCloneImage img1		; update faces		if img1/size/x >= defSize/x [			win/size/x: img1/size/x + 20			win/size/y: img1/size/y + 256; 90		] 		either (img1/size/x = img1/size/y) [bb/size: 120x120] [bb/size: 160x120]		canvas/size: img1/size				canvas/offset/x: (win/size/x - img1/size/x) / 2		sl/size/x: canvas/size/x		bb/image: img1		canvas/image: dst		isFile: true		factor: 127.0		sl/data: 0.5 		r3/data: true		r1/data: false 		r2/data: false		rcvDerivative2 img1 dst img1/size factor direction	]]; ***************** Test Program ****************************view win: layout [		title "Edges detection: 2nd Derivative"		origin margins space margins		cb: check "Grayscale" 		button 60 "Load" 		[loadImage]								button 60 "Quit" 		[rcvReleaseImage img1 								rcvReleaseImage dst Quit]		return		bb: base 160x120 img1		r1: radio "X" [direction: 1 rcvDerivative2 img1 dst img1/size factor direction]		r2: radio "Y" [direction: 2 rcvDerivative2 img1 dst img1/size factor direction]		r3: radio "XY" [direction: 3 rcvDerivative2 img1 dst img1/size factor direction]		return		sl: slider 512 [factor: to float! face/data * 255						rcvDerivative2 img1 dst img1/size factor direction		               ]		return		canvas: base 512x512 dst			do [sl/data: 0.5 r3/data: true]]