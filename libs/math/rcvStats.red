Red [	Title:   "Red Computer Vision: Red/System routines"	Author:  "Francois Jouen"	File: 	 %rcvSats.red	Tabs:	 4	Rights:  "Copyright (C) 2016 Francois Jouen. All rights reserved."	License: {		Distributed under the Boost Software License, Version 1.0.		See https://github.com/red/red/blob/master/BSL-License.txt	}]#include %rcvStatsRoutines.red;***************** STATISTICAL FUNCTIONS ***********************rcvCountNonZero: function [src [image!] return: [integer!]"Returns number of non zero values in image"][	_rcvCount src]rcvMeanImage: function [src [image!] return: [tuple!] /argb"Returns mean value of image as a tuple"][	v: _rcvMeanInt src	a: v >>> 24    r: v and 00FF0000h >> 16     g: v and FF00h >> 8     b: v and FFh    either argb [make tuple! reduce [a r g b]] [make tuple! reduce [r g b]]	]rcvSum: function [src [image!] return: [block!] /argb"Returns sum value of image as a block"][	v: _rcvMeanInt src	a: v >>> 24    r: v and 00FF0000h >> 16     g: v and FF00h >> 8     b: v and FFh    sz: src/size/x * src/size/y    sa: a * sz    sr: r * sz    sg: g * sz    sb: b * sz    either argb [reduce [sa sr sg sb]] [reduce [sr sg sb]]]rcvVarImage:  function [src [image!] return: [tuple!] /argb"returns standard deviation value of image as a tuple"][	v:  _rcvStdInt src	a: v >>> 24    r: v and 00FF0000h >> 16     g: v and FF00h >> 8     b: v and FFh	 	either argb [make tuple! reduce [a r g b]] [make tuple! reduce [r g b]]]rcvMedianImage: function [source [image!] return: [tuple!]"Returns median value of image as tuple"][	img: copy source	img/rgb: copy sort source/rgb 	n: to integer! (length? img/rgb) / 3 ; RGB channels only	pos: to integer! ((n + 1) / 2)	either odd? n [pxl: img/(pos)] [m1: img/(pos) m2: img/(pos + 1) pxl: (m1 + m2) / 2]	pxl]rcvMinImage: function [source [image!] return: [tuple!]"Minimal value in Image as a tuple"][	img: copy source	img/rgb: copy sort source/rgb 	pxl: img/1]rcvMaxImage: function [source [image!] return: [tuple!] "Maximal value in Image as a tuple"][	img: copy source	n: to integer! (length? img/rgb) / 3 ; RGB channels only	img/rgb: copy sort source/rgb 	pxl: img/(n)]rcvRangeImage: function [source [image!] return: [tuple!]"Range value in Image as a tuple"][	img: copy source	n: to integer! (length? img/rgb) / 3 ; RGB channels only	img/rgb: copy sort source/rgb 	pxl1: img/1	pxl2: img/(n)	pxl2 - pxl1]rcvSortImage: function [source [image!] dst [image!]]["Ascending image sorting"	img: copy source	dst/rgb: copy sort source/rgb ]