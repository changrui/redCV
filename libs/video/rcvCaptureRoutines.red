Red [	Title:   "Red Computer Vision: Video functions"	Author:  "Francois Jouen"	File: 	 %rcvCapture.red	Tabs:	 4	Rights:  "Copyright (C) 2016 Francois Jouen. All rights reserved."	License: {		Distributed under the Boost Software License, Version 1.0.		See https://github.com/red/red/blob/master/BSL-License.txt	}]#system [	#include %platforms.reds	; for dll access]createCam: routine [device [integer!]] [	openCamera device]setCamSize: routine [w [float!] h [float!]][	setCameraProperty  CV_CAP_PROP_FRAME_WIDTH w	setCameraProperty  CV_CAP_PROP_FRAME_HEIGHT h]getCamWidth: routine [return: [float!]][	getCameraProperty  CV_CAP_PROP_FRAME_WIDTH]getCamHeight: routine [return: [float!]][	getCameraProperty  CV_CAP_PROP_FRAME_HEIGHT]getCamImage: routine [rimg [image!]	/local 	ptr 	imgSize imgData imgEnd	pix r g b	handle] [	ptr: as int-ptr! readCamera		; RGB IplImage address 	ptr: ptr + 16	imgSize: ptr/value				; get cam image size	ptr: ptr + 1	imgData: as byte-ptr! ptr/value	; get cam image data address	imgEnd: imgData + imgSize			; end of data	; red image 	handle: 0	pix:  image/acquire-buffer rimg :handle	while [imgData < imgEnd][		r: as integer! imgData/value		imgData: imgData + 1		g: as integer! imgData/value		imgData: imgData + 1		b: as integer! imgData/value		pix/value: FF000000h or ((255 << 24) OR (b << 16 ) OR (g << 8) OR r)		imgData: imgData + 1		pix: pix + 1	]	image/release-buffer rimg handle yes]